"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlacedOrder = void 0;
const PAYLOAD = Symbol('PlacedOrder#payload');
class PlacedOrder {
    constructor(payload) {
        /* istanbul ignore next */
        this[PAYLOAD] = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, payload), (payload.apCode && { apCode: String(payload.apCode) })), (payload.avgPrice && { avgPrice: Number(payload.avgPrice) })), (payload.bsFlag && { bsFlag: String(payload.bsFlag) })), (payload.buySell && { buySell: String(payload.buySell) })), (payload.celable && { celable: String(payload.celable) })), (payload.celQty && { celQty: Number(payload.celQty) })), (payload.celQtyShare && { celQtyShare: Number(payload.celQtyShare) })), (payload.errCode && { errCode: String(payload.errCode) })), (payload.errMsg && { errMsg: String(payload.errMsg) })), (payload.matQty && { matQty: Number(payload.matQty) })), (payload.matQtyShare && { matQtyShare: Number(payload.matQtyShare) })), (payload.odPrice && { odPrice: Number(payload.odPrice) })), (payload.ordDate && { ordDate: String(payload.ordDate) })), (payload.ordNo && { ordNo: String(payload.ordNo) })), (payload.ordStatus && { ordStatus: String(payload.ordStatus) })), (payload.orgQty && { orgQty: Number(payload.orgQty) })), (payload.orgQtyShare && { orgQtyShare: Number(payload.orgQtyShare) })), (payload.preOrdNo && { preOrdNo: String(payload.preOrdNo) })), (payload.priceFlag && { priceFlag: String(payload.priceFlag) })), (payload.stockNo && { stockNo: String(payload.stockNo) })), (payload.trade && { trade: String(payload.trade) })), (payload.workDate && { workDate: String(payload.workDate) }));
    }
    get payload() {
        return this[PAYLOAD];
    }
    toObject() {
        return Object
            .entries(this.payload)
            .reduce((object, [key, value]) => (Object.assign(Object.assign({}, object), { [key]: String(value) })), {});
    }
}
exports.PlacedOrder = PlacedOrder;
