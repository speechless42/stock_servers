"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const trade_core_1 = require("@fugle/trade-core");
const streamer_1 = require("./streamer");
const placed_order_1 = require("./placed-order");
const enums_1 = require("./enums");
const utils_1 = require("./utils");
const SDK = Symbol('Client#sdk');
const STREAMER = Symbol('Client#streamer');
class Client {
    constructor(config) {
        this.config = config;
        const { apiUrl, apiKey, apiSecret, certPath, certPass, aid, password } = config;
        if (certPass && password) {
            this[SDK] = new trade_core_1.CoreSdk(apiUrl, aid, certPath, certPass, apiKey, apiSecret);
        }
    }
    get sdk() {
        return this[SDK];
    }
    set sdk(sdk) {
        this[SDK] = sdk;
    }
    get streamer() {
        return this[STREAMER];
    }
    set streamer(streamer) {
        this[STREAMER] = streamer;
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sdk) {
                const { password, certPass } = yield (0, utils_1.loadCredentials)(this.config.aid);
                const { apiUrl, apiKey, apiSecret, certPath, aid } = this.config;
                this.sdk = new trade_core_1.CoreSdk(apiUrl, aid, certPath, certPass, apiKey, apiSecret);
                this.config.password = password;
            }
            this.sdk.login(this.config.aid, this.config.password);
            this.streamer = new streamer_1.Streamer(this.sdk.getWsUrl());
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, utils_1.removeCredentials)(this.config.aid);
        });
    }
    // Must login first
    placeOrder(order) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.order(order.toObject());
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    // Must login first
    replacePrice(placedOrder, price) {
        return __awaiter(this, void 0, void 0, function* () {
            const order = placedOrder.toObject();
            const response = (typeof price === 'number')
                ? this.sdk.modifyPrice(order, price, enums_1.PriceFlag.Limit)
                : this.sdk.modifyPrice(order, null, price);
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    // Must login first
    replaceQuantity(placedOrder, quantity) {
        return __awaiter(this, void 0, void 0, function* () {
            const order = placedOrder.toObject();
            const response = this.sdk.modifyVolume(order, quantity);
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    // Must login first
    cancelOrder(placedOrder) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.replaceQuantity(placedOrder, 0);
        });
    }
    // Must login first
    replaceOrder(placedOrder, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!!(options && options.price) !== !!(options && options.quantity)) {
                /* istanbul ignore else */
                if (options.price)
                    return this.replacePrice(placedOrder, options.price);
                /* istanbul ignore else */
                if (options.quantity)
                    return this.replaceQuantity(placedOrder, options.quantity);
            }
            throw new TypeError('One and only one of the "price" or "quantity" options must be specified');
        });
    }
    // Must login first
    getOrders() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getOrderResults();
            const parsed = JSON.parse(response);
            return parsed.data.orderResults.map(order => new placed_order_1.PlacedOrder(Object.assign({}, order)));
        });
    }
    getHistoricalOrders(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const market = enums_1.Market.All;
            const { startDate, endDate } = options;
            const response = this.sdk.getOrderResultHistory(market, startDate, endDate);
            const parsed = JSON.parse(response);
            return parsed.data.orderResultHistory.map(order => new placed_order_1.PlacedOrder(Object.assign({}, order)));
        });
    }
    // Must login first
    getTransactions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { duration, startDate, endDate } = options;
            if (duration && (startDate || endDate)) {
                throw new TypeError('Cannot give "startDate" and "endDate" options when "duration" is specified');
            }
            if (!duration && (!startDate || !endDate)) {
                throw new TypeError('Both "startDate" and "endDate" options should be given if "duration" is not specified');
            }
            const response = duration
                ? this.sdk.getTransactions(duration)
                : this.sdk.getTransactionsByDate(startDate, endDate);
            const parsed = JSON.parse(response);
            return parsed.data.matSums;
        });
    }
    // Must login first
    getInventories() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getInventories();
            const parsed = JSON.parse(response);
            return parsed.data.stkSums;
        });
    }
    // Must login first
    getSettlements() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getSettlements();
            const parsed = JSON.parse(response);
            return parsed.data.settlements;
        });
    }
    // Must login first
    getBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getBalance();
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    // Must login first
    getTradeStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getTradeStatus();
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    // Must login first
    getMarketStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getMarketStatus();
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    // Must login first
    getKeyInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getKeyInfo();
            const parsed = JSON.parse(response);
            return parsed.data;
        });
    }
    getCertInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getCertInfo();
            const parsed = JSON.parse(response);
            return parsed;
        });
    }
    getMachineTime() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = this.sdk.getMachineTime();
            const parsed = JSON.parse(response);
            return parsed.data.time;
        });
    }
}
exports.Client = Client;
