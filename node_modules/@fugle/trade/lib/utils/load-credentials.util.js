"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadCredentials = void 0;
const keytar = require("keytar");
const inquirer = require("inquirer");
const constants_1 = require("../constants");
function loadCredentials(account) {
    return __awaiter(this, void 0, void 0, function* () {
        const questions = [];
        const password = yield keytar.getPassword(constants_1.FUGLETRADE_NODE_PASSWORD, account);
        !password && questions.push({ type: 'password', message: 'Enter esun account password', name: 'password', mask: '*' });
        const certPass = yield keytar.getPassword(constants_1.FUGLETRADE_NODE_CERTPASS, account);
        !certPass && questions.push({ type: 'password', message: 'Enter cert password', name: 'certPass', mask: '*' });
        const anwsers = questions.length && (yield inquirer.prompt(questions));
        anwsers.password && (yield keytar.setPassword(constants_1.FUGLETRADE_NODE_PASSWORD, account, anwsers.password));
        anwsers.certPass && (yield keytar.setPassword(constants_1.FUGLETRADE_NODE_CERTPASS, account, anwsers.certPass));
        return {
            password: password || anwsers.password,
            certPass: certPass || anwsers.certPass,
        };
    });
}
exports.loadCredentials = loadCredentials;
